{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sudhan-12/Sudhan-12/blob/main/Hand%20Written%20Digit%20Recognition%20using%20Artificial%20Neural%20Networks%20from%20scratch\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "HQEI2LTAI4lg"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import random\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IDRdwU7pPJOB"
      },
      "source": [
        "Converting the text file contents into ndarray"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZrEgk-lLM889"
      },
      "outputs": [],
      "source": [
        "X_train=np.loadtxt('train_X.csv',delimiter=',').T\n",
        "Y_train=np.loadtxt('train_label.csv',delimiter=',').T\n",
        "\n",
        "X_test=np.loadtxt('test_X.csv',delimiter=',').T\n",
        "Y_test=np.loadtxt('test_label.csv',delimiter=',').T\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GRE-j13BQJ0z",
        "outputId": "a05a4792-cfc1-497a-efe4-64aa6129d39a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Shape of X_train: (784, 1000)\n",
            "Shape of Y_train: (10, 1000)\n",
            "Shape of X_test: (784, 350)\n",
            "Shape of Y_test: (10, 350)\n"
          ]
        }
      ],
      "source": [
        "print(\"Shape of X_train:\",X_train.shape)\n",
        "print(\"Shape of Y_train:\",Y_train.shape)\n",
        "print(\"Shape of X_test:\",X_test.shape)\n",
        "print(\"Shape of Y_test:\",Y_test.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "6_9Ddy7PTyAW",
        "outputId": "329ea666-3bef-4438-ae63-23f74a05ad7f"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "index=random.randrange(0,X_train.shape[1])\n",
        "plt.imshow(X_train[:,index].reshape(28,28))\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Du0cA3aonwIo"
      },
      "outputs": [],
      "source": [
        "def tanh(x):\n",
        "  return np.tanh(x)\n",
        "def relu(x):\n",
        "  return np.maximum(x,0)\n",
        "def softmax(x):\n",
        "  expX=np.exp(x)\n",
        "  return expX/np.sum(expX,axis=0)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "Fuhp8XvFoe74"
      },
      "outputs": [],
      "source": [
        "def derivative_tanh(x):\n",
        "  return (1-np.power(x,2))\n",
        "def derivative_relu(x):\n",
        "  return np.array(x>0,dtype=np.float32)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fPcmsbMMpCIy"
      },
      "source": [
        "**bold text** INITIALIZE THE PARAMETERS\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8H518-bCpQIn"
      },
      "outputs": [],
      "source": [
        "def initialize_parameters(n_x,n_h,n_y):\n",
        "  w1=np.random.randn(n_h,n_x)*0.01\n",
        "  b1=np.zeros((n_h,1))\n",
        "\n",
        "  w2=np.random.randn(n_y,n_h)*0.01\n",
        "  b2=np.zeros((n_y,1))\n",
        "\n",
        "  paramters={\n",
        "      \"w1\":w1,\n",
        "      \"b1\":b1,\n",
        "      \"w2\":w2,\n",
        "      \"b2\":b2\n",
        "  }\n",
        "  return paramters\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WxCQxXz6qkjo"
      },
      "source": [
        "FORWARD PROPAGATION"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "B5mvMg2fqpO6"
      },
      "outputs": [],
      "source": [
        "def forward_propagation(x,parameters):\n",
        "  w1=parameters['w1']\n",
        "  b1=parameters['b1']\n",
        "  w2=parameters['w2']\n",
        "  b2=parameters['b2']\n",
        "\n",
        "  z1 = np.dot(w1,x) + b1\n",
        "  #a1=relu(z1)\n",
        "  a1=relu(z1)\n",
        "\n",
        "  z2=np.dot(w2,a1) + b2\n",
        "  a2=softmax(z2)\n",
        "\n",
        "  forward_cache={\n",
        "    \"z1\":z1,\n",
        "    \"a1\":a1,\n",
        "    \"z2\":z2,\n",
        "    \"a2\":a2\n",
        "}\n",
        "  return forward_cache\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iBUtw5Zb2Un4"
      },
      "source": [
        "COST FUNCTION FOR MULTI CLASSIFICATION"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "4-MPdNVD2mHi"
      },
      "outputs": [],
      "source": [
        "def cost_function(a2,y):\n",
        "  m=y.shape[1]\n",
        "  cost=-(1/m)*np.sum(y*np.log(a2))\n",
        "  return cost"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZRNSlAV839k_"
      },
      "source": [
        "BACK PROPAGATION\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "2ijAcdlI4A7-"
      },
      "outputs": [],
      "source": [
        "def back_propagation(x,y,parameters,forward_cache):\n",
        "  w1=parameters['w1']\n",
        "  b1=parameters['b1']\n",
        "  w2=parameters['w2']\n",
        "  b2=parameters['b2']\n",
        "\n",
        "  a1=forward_cache['a1']\n",
        "  a2=forward_cache['a2']\n",
        "  m=x.shape[1]\n",
        "\n",
        "  dz2=(a2-y)\n",
        "  dw2=(1/m)*np.dot(dz2,a1.T)\n",
        "  db2=(1/m)*np.sum(dz2,axis=1,keepdims=True) # Coloumn wise addition for bias\n",
        "\n",
        "  dz1=(1/m)*np.dot(w2.T,dz2)*derivative_relu(a1)\n",
        "  dw1=(1/m)*np.dot(dz1,x.T)\n",
        "  db1=(1/m)*np.sum(dz1,axis=1,keepdims=True)\n",
        "\n",
        "  gradients={\n",
        "      \"dw1\":dw1,\n",
        "      \"dw2\":dw2,\n",
        "      \"db1\":db1,\n",
        "      \"db2\":db2\n",
        "  }\n",
        "  return gradients\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GRHSL1nb9Jy1"
      },
      "source": [
        "UPDATE PARAMETERS\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "Y8SJwrSw9NIL"
      },
      "outputs": [],
      "source": [
        "def update_parameters(parameters,gradients,learning_rate):\n",
        "  w1=parameters['w1']\n",
        "  w2=parameters['w2']\n",
        "  b1=parameters['b1']\n",
        "  b2=parameters['b2']\n",
        "\n",
        "  dw1=gradients['dw1']\n",
        "  dw2=gradients['dw2']\n",
        "  db1=gradients['db1']\n",
        "  db2=gradients['db2']\n",
        "\n",
        "  w1=w1-learning_rate*dw1\n",
        "  b1=b1-learning_rate*db1\n",
        "  w2=w2-learning_rate*dw2\n",
        "  b2=b2-learning_rate*db2\n",
        "\n",
        "  parameters={\n",
        "      \"w1\":w1,\n",
        "      \"b1\":b1,\n",
        "      \"w2\":w2,\n",
        "      \"b2\":b2\n",
        "  }\n",
        "  return parameters\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wlKVSvFr-75C"
      },
      "source": [
        "COMPLETE MODEL"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A7BPKTbB-_0G"
      },
      "outputs": [],
      "source": [
        "def model(x ,y ,n_h , learning_rate , iteration):\n",
        "  n_x=x.shape[0]\n",
        "  n_y=y.shape[0]\n",
        "\n",
        "  parameters= initialize_parameters(n_x,n_h,n_y)\n",
        "\n",
        "\n",
        "  cost_list=[]\n",
        "\n",
        "  for i in range(iteration):\n",
        "    forward_cache=forward_propagation(x,parameters)\n",
        "\n",
        "    cost=cost_function(forward_cache['a2'],y)\n",
        "\n",
        "    gradients=back_propagation(x,y,parameters,forward_cache)\n",
        "\n",
        "    parameters= update_parameters(parameters,gradients,learning_rate)\n",
        "\n",
        "    cost_list.append(cost)\n",
        "\n",
        "    if(i%(iteration/10)==0):\n",
        "      print(\"Cost after \",i,\" iteration is \",cost)\n",
        "  return parameters, cost_list\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "jVvGzGRQBubR",
        "outputId": "a79cff5f-d2d2-4679-b580-ed7a2c2fbe6b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Cost after  0  iteration is  2.4027580615382615\n",
            "Cost after  20  iteration is  1.1996956181770397\n",
            "Cost after  40  iteration is  0.8346250277253519\n",
            "Cost after  60  iteration is  0.6636792163574662\n",
            "Cost after  80  iteration is  0.561702523704341\n",
            "Cost after  100  iteration is  0.49201849780658435\n",
            "Cost after  120  iteration is  0.44028762484814626\n",
            "Cost after  140  iteration is  0.3997266991509888\n",
            "Cost after  160  iteration is  0.36668440527465546\n",
            "Cost after  180  iteration is  0.3390049036244132\n"
          ]
        }
      ],
      "source": [
        "iterations=200\n",
        "n_h=2000\n",
        "learning_rate=0.005\n",
        "Parameters,Cost_list=model(X_train,Y_train,n_h=n_h,learning_rate=learning_rate,iteration=iterations)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "CXk1hwOvEhC1",
        "outputId": "2fcf101c-487c-4df5-e5ed-5fad20503145"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7ee050cc09a0>]"
            ]
          },
          "execution_count": 43,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "t=np.arange(0,iterations)\n",
        "plt.plot(t,Cost_list)\n",
        "#plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nSBMrUzjH2t2"
      },
      "outputs": [],
      "source": [
        "def accuracy(inp,labels,parameters):\n",
        "  forward_cache=forward_propagation(inp,parameters)\n",
        "  a_out=forward_cache['a2']\n",
        "\n",
        "  a_out=np.argmax(a_out,0)\n",
        "  y_out=np.argmax(labels,0)\n",
        "\n",
        "  acc=np.mean(a_out==y_out)\n",
        "  return acc"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dRj-RVxuIcZS",
        "outputId": "a9d3e569-1c7e-472a-c79e-4311dde5bbf8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of training data set is  1.0\n",
            "Accuracy of test data set is  0.8571428571428571\n"
          ]
        }
      ],
      "source": [
        "print(\"Accuracy of training data set is \",accuracy(X_train,Y_train,parameters=Parameters))\n",
        "print(\"Accuracy of test data set is \",accuracy(X_test,Y_test,parameters=Parameters))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "gTSn-VabI0JD",
        "outputId": "702675d4-68ed-4f8b-dc5d-03d8794a7a8f"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            " model says: 9\n"
          ]
        }
      ],
      "source": [
        "index=random.randrange(0,X_test.shape[1])\n",
        "plt.imshow(X_test[:,index].reshape(28,28))\n",
        "plt.show()\n",
        "\n",
        "forward_cache=forward_propagation(X_test[:,index].reshape(X_test.shape[0],1),Parameters)\n",
        "a_out=forward_cache['a2']\n",
        "\n",
        "a_out=np.argmax(a_out,0)\n",
        "\n",
        "print(\" model says:\", a_out[0])"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPGvwEj5FfhayRDlNIPYpBe",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}